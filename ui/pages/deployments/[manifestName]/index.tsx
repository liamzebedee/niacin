import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Link from 'next/link'
import { getChainName } from '@/lib'

const inter = Inter({ subsets: ['latin'] })

import {manifests} from '../../../data/manifests'
import { useRouter } from 'next/router'

export default function DeploymentsWrapper() {
    // Get id from URL
    const router = useRouter()
    const id = router.query.manifestName as string
    // const id = router.query['id'] as string;
    // console.log(id)
    if (!id) return <></>
    
    // @ts-ignore
    const manifest = manifests[id]

    return (
        <Deployments manifest={manifest} />
    )

}


export function Deployments({ manifest }: any) {
    const deployment = manifest.deployments[0]
    const networkName = getChainName(deployment.chainId)

    return (
        <>
            <Head>
                <title>Contracts</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h3>Deployments / {networkName}</h3>
                <h1>Contracts</h1>

                <pre>
                    {`Chain ID: ${manifest.deployments[0].chainId}
Deployer: ${manifest.deployments[0].deployer}`}
                </pre>
                <table>
                    <thead>
                        <tr>
                            <th>Contract</th>
                            <th>Address</th>
                            <th>Version</th>
                            <th>Last update</th>
                            <th>From branch</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {Object.values(manifest.targets.user).map((target: any) => {
                            return <TargetRow manifest={manifest} target={target} namespace="user" />
                        })}

                        {Object.values(manifest.targets.system).map((target: any) => {
                            return <TargetRow manifest={manifest} target={target} namespace="system" />
                        })}

                        {/* {([manifest.targets.system.AddressResolver]).map((target: any) => {
              return <TargetRow target={target} namespace="system" />
            })} */}
                    </tbody>
                </table>
            </main>
        </>
    )
}


const TargetRow = ({ manifest, target, namespace }: any) => {

    const router = useRouter()
    const manifestName = router.query.manifestName as string

    let address
    let name

    if (namespace == 'system') {
        address = target.address

        if (target.target != 'AddressResolver') {
            name = `Proxy${target.target}`
        } else {
            name = target.target
        }

    } else {
        const proxyName = `Proxy${target.target}`
        const proxy = manifest.targets.system[proxyName]
        address = proxy.address
        name = target.target
    }

    function findDeployment(target: any) {
        let eventType = 'deploy_impl'
        if (target.target == 'AddressResolver') {
            return manifest.deployments[0]
        }

        for (let deployment of manifest.deployments) {
            for (let event of deployment.events) {
                if (event.type == eventType && event.target == target.target && event.version == target.version) {
                    return deployment
                }
            }
        }
    }

    const deployment = findDeployment(target)
    const deploymentDate = (new Date(deployment.time)).toLocaleDateString()

    return (
        <tr key={address}>
            <td>{name}</td>
            <td>{address}</td>
            <td>{target.version}</td>
            <td>
                <p>{deploymentDate}</p>
            </td>
            <td>
                <p><b>{deployment.revision.branch}</b></p>
                <p>
                    {deployment.revision.descriptor}
                </p>
            </td>
            <td>
                <Link href={`/deployments/${manifestName}/contract/${namespace}/${name}/interact`}>Interact</Link>
            </td>
        </tr>
    )
}
