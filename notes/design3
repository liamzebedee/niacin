https://github.com/wolflo/evm-opcodes/blob/main/gas.md


generate an atomic solidity migration


gas estimation:

    - 2000 per CALL
    - 32000 per CREATE/CREATE2

okay so with gas limit of 1.5m
46 contract deploys at max with no bytecode



best deploy contracts in a batch
    proxy
    new impls

and then migrate in a single tx
    for target:
        proxy.setimpl
        proxy.importaddrs
    
    run initialize scripts:
        initialize



migrate()
    event UpsertAddressResolver()    
    event NewProxy()
    event Upgrade()

    addressresolver = new AddressResolver() || addressResolver

    addressresolver.beginDeployment(version)

    bytes32[] memory names; 
    address[] memory destinations;

    // proxies.
    function deployTarget(code) {
        proxy = new Proxy(addressresolver)
        instance = proxy.upgrade(bytecode)
        
        // autogenerate dependencies here.
        this.rebuildCache(
            names,
            computeCreate2(this.system, salt, bytecode)
        )

        // push info.
    }

    // deploy all targets.
    for target of targets:
        deployTarget(target)

    // initialize.
    // do all script actions here.

    // finalize.
    addressresolver.endDeployment()



rebuild caches is unnecessary just with create2

/*

bytecode = type(ContractName).runtimeCode
require(target) = computeCreate2(this.system, salt, bytecode)

*/


# txs =
    - deploy dsproxy
    - 2nd stuff:
        - deploy contracts
            - addressresolver
            - proxies
            - targets
        - migrate



deploy all impls

script:

    contract Migration {
        constructor() {}

        function migrate(bytes[] calldata codes) {
            for code in codes:
                create2(code)
            }
        }
    }


    Migration.migrate([
        ...proxies,
        ...impls
    ])


then for each proxy:



script:

    interface IProxy {
        function upgrade(address impl, address[] addrs) external;
    }

    // Autogenerated.
    interface IContract1 {
        function initialize(address[] addrs) external;
    }
    interface IContract2 {
        function getOrCreateTakeMarket(address[] addrs) external;
    }

    contract Migration {
        function migrate() {
            IProxy(0x111111111111111111).upgrade(impl, addrs)
            IProxy(0x222222222222222222).upgrade(impl, addrs)
            IProxy(0x333333333333333333).upgrade(impl, addrs)
            IProxy(0x444444444444444444).upgrade(impl, addrs)

            // run initialize functions
            IContract1(0x111111111111111111).initialize(addrs)
            IContract2(0x222222222222222222).getOrCreateTakeMarket(addrs)
        }




what do we do:


upsert dsproxyfactory
upsert dsproxy
